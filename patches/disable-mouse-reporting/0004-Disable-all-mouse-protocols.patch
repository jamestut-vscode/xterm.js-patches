From 694ff9334d45b030024cb091c4938c1e9125b3fe Mon Sep 17 00:00:00 2001
From: James <aslan.jnn@gmail.com>
Date: Sun, 15 Oct 2023 16:29:08 +1100
Subject: Disable all mouse protocols when mouse reporting is disabled

---
 src/browser/Terminal.ts | 103 +++++++++++++++++++++++-----------------
 1 file changed, 59 insertions(+), 44 deletions(-)

diff --git a/src/browser/Terminal.ts b/src/browser/Terminal.ts
index 95dec13d..94f69a5c 100644
--- a/src/browser/Terminal.ts
+++ b/src/browser/Terminal.ts
@@ -115,6 +115,8 @@ export class Terminal extends CoreTerminal implements ITerminal {
    */
   private _unprocessedDeadKey: boolean = false;
 
+  private _activeMouseEvents: CoreMouseEventType = CoreMouseEventType.NONE;
+
   public linkifier2: ILinkifier2;
   public viewport: IViewport | undefined;
   private _compositionHelper: ICompositionHelper | undefined;
@@ -652,6 +654,53 @@ export class Terminal extends CoreTerminal implements ITerminal {
       });
     }
 
+    function mouseProtocolChangeHandler(events: CoreMouseEventType) {
+      // apply global changes on events
+      if (events) {
+        if (self.optionsService.rawOptions.logLevel === 'debug') {
+          self._logService.debug('Binding to mouse events:', self.coreMouseService.explainEvents(events));
+        }
+        self.element!.classList.add('enable-mouse-events');
+        self._selectionService!.disable();
+      } else {
+        self._logService.debug('Unbinding from mouse events.');
+        self.element!.classList.remove('enable-mouse-events');
+        self._selectionService!.enable();
+      }
+
+      // add/remove handlers from requestedEvents
+
+      if (!(events & CoreMouseEventType.MOVE)) {
+        el.removeEventListener('mousemove', requestedEvents.mousemove!);
+        requestedEvents.mousemove = null;
+      } else if (!requestedEvents.mousemove) {
+        el.addEventListener('mousemove', eventListeners.mousemove);
+        requestedEvents.mousemove = eventListeners.mousemove;
+      }
+
+      if (!(events & CoreMouseEventType.WHEEL)) {
+        el.removeEventListener('wheel', requestedEvents.wheel!);
+        requestedEvents.wheel = null;
+      } else if (!requestedEvents.wheel) {
+        el.addEventListener('wheel', eventListeners.wheel, { passive: false });
+        requestedEvents.wheel = eventListeners.wheel;
+      }
+
+      if (!(events & CoreMouseEventType.UP)) {
+        self._document!.removeEventListener('mouseup', requestedEvents.mouseup!);
+        requestedEvents.mouseup = null;
+      } else if (!requestedEvents.mouseup) {
+        requestedEvents.mouseup = eventListeners.mouseup;
+      }
+
+      if (!(events & CoreMouseEventType.DRAG)) {
+        self._document!.removeEventListener('mousemove', requestedEvents.mousedrag!);
+        requestedEvents.mousedrag = null;
+      } else if (!requestedEvents.mousedrag) {
+        requestedEvents.mousedrag = eventListeners.mousedrag;
+      }
+    }
+
     /**
      * Event listener state handling.
      * We listen to the onProtocolChange event of CoreMouseService and put
@@ -695,51 +744,17 @@ export class Terminal extends CoreTerminal implements ITerminal {
         }
       }
     };
-    this.register(this.coreMouseService.onProtocolChange(events => {
-      // apply global changes on events
-      if (events) {
-        if (this.optionsService.rawOptions.logLevel === 'debug') {
-          this._logService.debug('Binding to mouse events:', this.coreMouseService.explainEvents(events));
-        }
-        this.element!.classList.add('enable-mouse-events');
-        this._selectionService!.disable();
-      } else {
-        this._logService.debug('Unbinding from mouse events.');
-        this.element!.classList.remove('enable-mouse-events');
-        this._selectionService!.enable();
-      }
-
-      // add/remove handlers from requestedEvents
-
-      if (!(events & CoreMouseEventType.MOVE)) {
-        el.removeEventListener('mousemove', requestedEvents.mousemove!);
-        requestedEvents.mousemove = null;
-      } else if (!requestedEvents.mousemove) {
-        el.addEventListener('mousemove', eventListeners.mousemove);
-        requestedEvents.mousemove = eventListeners.mousemove;
-      }
-
-      if (!(events & CoreMouseEventType.WHEEL)) {
-        el.removeEventListener('wheel', requestedEvents.wheel!);
-        requestedEvents.wheel = null;
-      } else if (!requestedEvents.wheel) {
-        el.addEventListener('wheel', eventListeners.wheel, { passive: false });
-        requestedEvents.wheel = eventListeners.wheel;
-      }
-
-      if (!(events & CoreMouseEventType.UP)) {
-        this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);
-        requestedEvents.mouseup = null;
-      } else if (!requestedEvents.mouseup) {
-        requestedEvents.mouseup = eventListeners.mouseup;
-      }
-
-      if (!(events & CoreMouseEventType.DRAG)) {
-        this._document!.removeEventListener('mousemove', requestedEvents.mousedrag!);
-        requestedEvents.mousedrag = null;
-      } else if (!requestedEvents.mousedrag) {
-        requestedEvents.mousedrag = eventListeners.mousedrag;
+    this.register(this.coreMouseService.onProtocolChange((events) => {
+      this._activeMouseEvents = events;
+      if (!this.optionsService.rawOptions.allowMouseReporting) {
+        events = CoreMouseEventType.NONE;
       }
+      mouseProtocolChangeHandler(events);
+    }));
+    this.register(this.optionsService.onOptionChange(() => {
+      let events = this.optionsService.rawOptions.allowMouseReporting ?
+        this._activeMouseEvents : CoreMouseEventType.NONE;
+      mouseProtocolChangeHandler(events);
     }));
     // force initial onProtocolChange so we dont miss early mouse requests
     this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol;
-- 
2.39.3 (Apple Git-145)
